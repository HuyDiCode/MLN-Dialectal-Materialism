import React, { useEffect, useRef, useState } from "react";
import { gsap, ScrollTrigger } from "../hooks/useGSAP";

interface TimelineItem {
  id: number;
  title: string;
  description: string[];
  category: string;
  categoryDescription: string;
  image: string;
  isLeft: boolean;
}

const timelineData: TimelineItem[] = [
  {
    id: 1,
    title: "NƒÉm cu·ªëi ƒë·∫°i h·ªçc",
    description: [
      "Nh√¢n v·∫≠t ƒëang ho√†n th√†nh nh·ªØng m√¥n cu·ªëi c√πng, h·ªì s∆° c√≤n m·ªèng, ch∆∞a c√≥ nhi·ªÅu kinh nghi·ªám.",
      "D·ª± ƒë·ªãnh s·∫Ω l·∫≠p t√†i kho·∫£n TikTok ƒë·ªÉ chia s·∫ª h√†nh tr√¨nh h·ªçc t·∫≠p.",
    ],
    category: "C√°i ri√™ng - C√°i chung",
    categoryDescription:
      "Nh√¢n v·∫≠t ch·ªâ l√† m·ªôt tr∆∞·ªùng h·ª£p ri√™ng, nh∆∞ng ph·∫£n √°nh t√¨nh tr·∫°ng chung: nhi·ªÅu sinh vi√™n thi·∫øu kinh nghi·ªám th·ª±c t·∫ø, ch·ªçn m·∫°ng x√£ h·ªôi nh∆∞ c√¥ng c·ª• ƒë·ªÉ 'b√π ƒë·∫Øp'.",
    image: "üìö",
    isLeft: true,
  },
  {
    id: 2,
    title: "T·ªët nghi·ªáp",
    description: [
      "B·∫Øt ƒë·∫ßu chu·∫©n b·ªã CV, t√¨m vi·ªác qua LinkedIn, Facebook.",
      "Th·ª≠ ƒëƒÉng video, chia s·∫ª tr·∫£i nghi·ªám nh∆∞ng √≠t ai quan t√¢m.",
    ],
    category: "Hi·ªán t∆∞·ª£ng - B·∫£n ch·∫•t",
    categoryDescription:
      "Hi·ªán t∆∞·ª£ng: √≠t t∆∞∆°ng t√°c khi·∫øn nh√¢n v·∫≠t lo l·∫Øng, t·ª± ti. B·∫£n ch·∫•t: vi·ªác t√¨m vi·ªác l√†m c·∫ßn nƒÉng l·ª±c th·∫≠t, ch·ª© kh√¥ng ch·ªâ 'like' hay 'view' tr√™n m·∫°ng.",
    image: "üéì",
    isLeft: false,
  },
  {
    id: 3,
    title: "Sau 3 th√°ng",
    description: [
      "ƒêƒÉng b√†i ƒë·ªÅu ƒë·∫∑n nh∆∞ng v·∫´n √≠t ng∆∞·ªùi xem, nh√¢n v·∫≠t hoang mang khi th·∫•y b·∫°n b√® kh√°c viral.",
      "V·ª´a n·ªôp CV v·ª´a th·∫•t v·ªçng v√¨ k·∫øt qu·∫£ kh√¥ng nh∆∞ mong mu·ªën.",
    ],
    category: "C√°i ri√™ng - C√°i chung",
    categoryDescription:
      "N·ªói lo c√° nh√¢n ph·∫£n √°nh th·ª±c tr·∫°ng chung: sinh vi√™n d·ªÖ b·ªã √°p l·ª±c khi so s√°nh m√¨nh v·ªõi ng∆∞·ªùi kh√°c tr√™n m·∫°ng.",
    image: "üì±",
    isLeft: true,
  },
  {
    id: 4,
    title: "Sau n·ª≠a nƒÉm",
    description: [
      "Nh√¢n v·∫≠t h·ªçc c√°ch ch·∫°y theo trend ƒë·ªÉ tƒÉng view.",
      "B√†i vi·∫øt b·∫Øt ƒë·∫ßu viral, nh∆∞ng n·ªôi dung ki·∫øn th·ª©c ng√†y c√†ng √≠t.",
    ],
    category: "L∆∞·ª£ng - Ch·∫•t",
    categoryDescription:
      "L∆∞·ª£ng view tƒÉng d·∫ßn ‚Üí d·∫´n ƒë·∫øn thay ƒë·ªïi v·ªÅ ch·∫•t: nh√¢n v·∫≠t t·∫≠p trung v√†o 'trend' h∆°n l√† ki·∫øn th·ª©c th·∫≠t. H·ªá qu·∫£: d·∫ßn xa r·ªùi m·ª•c ti√™u ban ƒë·∫ßu l√† th·ªÉ hi·ªán nƒÉng l·ª±c.",
    image: "üìà",
    isLeft: false,
  },
  {
    id: 5,
    title: "Sau g·∫ßn 1 nƒÉm",
    description: [
      "C√≥ nhi·ªÅu b√†i vi·∫øt viral, m·ªôt s·ªë c√¥ng ty ch√∫ √Ω v√† li√™n h·ªá.",
      "Nh√¢n v·∫≠t ƒëi·ªÅu ch·ªânh: v·ª´a ch·∫°y trend, v·ª´a chia s·∫ª ki·∫øn th·ª©c th·ª±c s·ª±, x√¢y d·ª±ng nƒÉng l·ª±c th·∫≠t.",
    ],
    category: "Hi·ªán t∆∞·ª£ng - B·∫£n ch·∫•t",
    categoryDescription:
      "Khi nh·∫≠n ra b·∫£n ch·∫•t (nƒÉng l·ª±c + tri th·ª©c) m·ªõi l√† c·ªët l√µi, nh√¢n v·∫≠t dung h√≤a m·∫°ng x√£ h·ªôi nh∆∞ m·ªôt c√¥ng c·ª• b·ªï tr·ª£ ‚Üí cu·ªëi c√πng t√¨m ƒë∆∞·ª£c vi·ªác l√†m ·ªïn ƒë·ªãnh.",
    image: "üíº",
    isLeft: true,
  },
];

const TimelineSection: React.FC = () => {
  const sectionRef = useRef<HTMLDivElement>(null);
  const headerRef = useRef<HTMLDivElement>(null);
  const timelineRef = useRef<HTMLDivElement>(null);
  const [hoveredCard, setHoveredCard] = useState<number | null>(null);
  const [mousePosition, setMousePosition] = useState({ x: 0, y: 0 });

  useEffect(() => {
    if (!sectionRef.current || !headerRef.current || !timelineRef.current)
      return;

    // Mouse tracking for magnetic effects
    const handleMouseMove = (e: MouseEvent) => {
      setMousePosition({
        x: e.clientX,
        y: e.clientY,
      });
    };

    window.addEventListener("mousemove", handleMouseMove);

    // Enhanced header animation with 3D effects
    gsap.fromTo(
      headerRef.current.children,
      {
        y: 100,
        opacity: 0,
        rotationX: 45,
        transformPerspective: 1000,
        scale: 0.8,
      },
      {
        y: 0,
        opacity: 1,
        rotationX: 0,
        scale: 1,
        duration: 1.5,
        stagger: 0.3,
        ease: "power3.out",
        scrollTrigger: {
          trigger: headerRef.current,
          start: "top 80%",
          end: "bottom 60%",
          toggleActions: "play none none reverse",
        },
      }
    );

    // Enhanced timeline items animations with 3D effects
    const timelineItems =
      timelineRef.current.querySelectorAll(".timeline-item");

    timelineItems.forEach((item, itemIndex) => {
      const cards = item.querySelectorAll(".timeline-card");

      // Enhanced stagger animation with 3D transforms
      cards.forEach((card, cardIndex) => {
        gsap.fromTo(
          card,
          {
            y: 150,
            opacity: 0,
            scale: 0.7,
            rotationY: cardIndex % 2 === 0 ? -45 : 45,
            transformPerspective: 1000,
          },
          {
            y: 0,
            opacity: 1,
            scale: 1,
            rotationY: 0,
            duration: 1.2,
            delay: cardIndex * 0.3,
            ease: "power3.out",
            scrollTrigger: {
              trigger: item,
              start: "top 85%",
              end: "bottom 15%",
              toggleActions: "play reverse play reverse",
            },
          }
        );

        // Enhanced slide away effect with rotation
        gsap.fromTo(
          card,
          {
            x: 0,
            opacity: 1,
            scale: 1,
            rotationY: 0,
          },
          {
            x: cardIndex % 2 === 0 ? -150 : 150,
            opacity: 0.2,
            scale: 0.9,
            rotationY: cardIndex % 2 === 0 ? -25 : 25,
            ease: "power2.inOut",
            scrollTrigger: {
              trigger: item,
              start: "bottom 70%",
              end: "bottom 5%",
              scrub: 2,
              toggleActions: "play none none reverse",
            },
          }
        );

        // Floating animation for cards
        gsap.to(card, {
          y: -10,
          duration: 2 + Math.random() * 2,
          repeat: -1,
          yoyo: true,
          ease: "sine.inOut",
          delay: itemIndex * 0.5 + cardIndex * 0.3,
        });
      });

      // Enhanced timeline dot animation with pulsing effect
      const dot = item.querySelector(".timeline-dot");
      if (dot) {
        gsap.fromTo(
          dot,
          {
            scale: 0,
            rotation: 180,
          },
          {
            scale: 1,
            rotation: 0,
            duration: 0.8,
            ease: "back.out(2)",
            scrollTrigger: {
              trigger: item,
              start: "top 75%",
              toggleActions: "play reverse play reverse",
            },
          }
        );

        // Continuous pulsing animation
        gsap.to(dot, {
          scale: 1.2,
          duration: 1.5,
          repeat: -1,
          yoyo: true,
          ease: "sine.inOut",
          delay: itemIndex * 0.3,
        });

        // Glow effect
        gsap.to(dot, {
          boxShadow:
            "0 0 20px rgba(59, 130, 246, 0.6), 0 0 40px rgba(59, 130, 246, 0.4)",
          duration: 2,
          repeat: -1,
          yoyo: true,
          ease: "sine.inOut",
          delay: itemIndex * 0.2,
        });
      }
    });

    // Enhanced timeline line animation with gradient effect
    const timelineLine = timelineRef.current.querySelector(".timeline-line");
    if (timelineLine) {
      gsap.fromTo(
        timelineLine,
        {
          scaleY: 0,
          transformOrigin: "top center",
        },
        {
          scaleY: 1,
          ease: "none",
          scrollTrigger: {
            trigger: timelineRef.current,
            start: "top 80%",
            end: "bottom 20%",
            scrub: 1,
            toggleActions: "play none none reverse",
          },
        }
      );

      // Animated gradient effect on timeline
      gsap.to(timelineLine, {
        backgroundPosition: "0% 100%",
        duration: 3,
        repeat: -1,
        ease: "none",
      });
    }

    return () => {
      ScrollTrigger.getAll().forEach((trigger) => trigger.kill());
      window.removeEventListener("mousemove", handleMouseMove);
    };
  }, []);

  return (
    <div
      ref={sectionRef}
      id='timeline-section'
      className='relative w-full bg-gradient-to-br from-gray-50 via-white to-purple-50 overflow-hidden'
    >
      {/* Dynamic Background Elements */}
      <div className='absolute inset-0 overflow-hidden'>
        <div
          className='absolute w-96 h-96 rounded-full blur-3xl opacity-10 animate-pulse'
          style={{
            background: "linear-gradient(45deg, #9333ea, #3b82f6)",
            top: "10%",
            left: "5%",
            transform: `translate(${mousePosition.x * 0.01}px, ${
              mousePosition.y * 0.01
            }px)`,
            transition: "transform 0.3s ease-out",
          }}
        ></div>
        <div
          className='absolute w-72 h-72 rounded-full blur-3xl opacity-8 animate-pulse'
          style={{
            background: "linear-gradient(135deg, #ec4899, #8b5cf6)",
            top: "60%",
            right: "5%",
            transform: `translate(${-mousePosition.x * 0.015}px, ${
              -mousePosition.y * 0.015
            }px)`,
            transition: "transform 0.3s ease-out",
            animationDelay: "2s",
          }}
        ></div>
      </div>

      {/* Section Header */}
      <div ref={headerRef} className='relative py-20 text-center'>
        <div className='relative'>
          <h2 className='text-5xl md:text-7xl lg:text-8xl font-bold text-gray-900 mb-6 custom-font relative'>
            <span className='inline-block hover:scale-105 transition-transform duration-300'>
              H√†nh tr√¨nh c·ªßa m·ªôt
            </span>
            <span className='block text-transparent bg-clip-text bg-gradient-to-r from-purple-600 via-blue-600 to-indigo-600 hover:from-purple-400 hover:via-pink-500 hover:to-indigo-500 transition-all duration-500'>
              sinh vi√™n
            </span>

            {/* Decorative elements */}
            <div className='absolute -top-6 -right-6 w-12 h-12 bg-gradient-to-br from-purple-400 to-pink-500 rounded-full opacity-60 animate-bounce'></div>
            <div className='absolute -bottom-4 -left-4 w-8 h-8 bg-gradient-to-br from-blue-400 to-purple-500 rounded-full opacity-40 animate-pulse delay-1000'></div>
          </h2>

          <p className='text-xl md:text-2xl lg:text-3xl text-gray-600 max-w-4xl mx-auto px-4 leading-relaxed'>
            <span className='font-semibold text-purple-700'>
              Trong giai ƒëo·∫°n chuy·ªÉn ti·∫øp
            </span>
            <span className='block mt-2'>
              T·ª´ bƒÉng gh·∫ø nh√† tr∆∞·ªùng ƒë·∫øn th·∫ø gi·ªõi vi·ªác l√†m
            </span>
          </p>

          {/* Animated underline */}
          <div className='mt-8 flex justify-center'>
            <div className='w-32 h-1 bg-gradient-to-r from-purple-500 to-blue-500 rounded-full animate-pulse'></div>
          </div>
        </div>
      </div>

      {/* Timeline */}
      <div ref={timelineRef} className='relative max-w-7xl mx-auto px-4 pb-64'>
        {/* Enhanced Timeline Line with gradient */}
        <div
          className='timeline-line absolute left-1/2 transform -translate-x-1/2 w-2 h-full origin-top rounded-full'
          style={{
            background:
              "linear-gradient(180deg, #3b82f6, #8b5cf6, #ec4899, #3b82f6)",
            backgroundSize: "100% 200%",
            animation: "gradient-shift 4s ease-in-out infinite",
          }}
        ></div>

        {timelineData.map((item, index) => (
          <div key={item.id} className='timeline-item relative mb-40'>
            {/* Enhanced Timeline Dot */}
            <div
              className='timeline-dot absolute left-1/2 transform -translate-x-1/2 w-8 h-8 rounded-full border-4 border-white shadow-2xl z-20 cursor-pointer transition-all duration-300 hover:scale-125'
              style={{
                background: `linear-gradient(45deg, 
                  ${
                    index % 3 === 0
                      ? "#3b82f6"
                      : index % 3 === 1
                      ? "#8b5cf6"
                      : "#ec4899"
                  }, 
                  ${
                    index % 3 === 0
                      ? "#1d4ed8"
                      : index % 3 === 1
                      ? "#7c3aed"
                      : "#db2777"
                  })`,
                boxShadow: `0 0 20px ${
                  index % 3 === 0
                    ? "rgba(59, 130, 246, 0.5)"
                    : index % 3 === 1
                    ? "rgba(139, 92, 246, 0.5)"
                    : "rgba(236, 72, 153, 0.5)"
                }`,
              }}
              onMouseEnter={() => setHoveredCard(item.id)}
              onMouseLeave={() => setHoveredCard(null)}
            ></div>

            {/* Content Container */}
            <div
              className={`flex items-start ${
                item.isLeft ? "flex-row-reverse" : "flex-row"
              } gap-12`}
            >
              {/* Image/Icon Side */}
              <div className='w-1/2 flex justify-center'>
                <div
                  className={`timeline-card group bg-gradient-to-br from-white to-gray-50 rounded-3xl shadow-xl p-10 border-2 transition-all duration-500 transform hover:scale-105 hover:-translate-y-2 cursor-pointer ${
                    hoveredCard === item.id
                      ? "border-purple-400 shadow-purple-200"
                      : "border-gray-200 hover:border-purple-300"
                  }`}
                  style={{
                    backdropFilter: "blur(10px)",
                    background:
                      hoveredCard === item.id
                        ? "linear-gradient(135deg, rgba(147, 51, 234, 0.05), rgba(79, 70, 229, 0.05))"
                        : "linear-gradient(135deg, rgba(255, 255, 255, 0.9), rgba(249, 250, 251, 0.9))",
                  }}
                  onMouseEnter={() => setHoveredCard(item.id)}
                  onMouseLeave={() => setHoveredCard(null)}
                >
                  <div className='text-8xl mb-6 text-center group-hover:scale-110 transition-transform duration-300'>
                    {item.image}
                  </div>
                  <div className='relative'>
                    <h3 className='text-3xl font-bold text-gray-900 text-center mb-3 group-hover:text-purple-700 transition-colors duration-300'>
                      M·ªëc {item.id}
                    </h3>
                    <h4 className='text-xl font-semibold text-center bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent'>
                      {item.title}
                    </h4>

                    {/* Floating particles around icon */}
                    {hoveredCard === item.id && (
                      <div className='absolute inset-0 pointer-events-none'>
                        <div className='absolute top-2 right-2 w-2 h-2 bg-purple-400 rounded-full animate-ping'></div>
                        <div className='absolute bottom-4 left-4 w-1 h-1 bg-blue-400 rounded-full animate-bounce delay-300'></div>
                        <div className='absolute top-6 left-2 w-1 h-1 bg-pink-400 rounded-full animate-pulse delay-500'></div>
                      </div>
                    )}
                  </div>
                </div>
              </div>

              {/* Content Side */}
              <div className='w-1/2 space-y-8'>
                {/* Main Description Card */}
                <div
                  className={`timeline-card group bg-gradient-to-br from-white to-blue-50 rounded-3xl shadow-xl p-8 border-2 transition-all duration-500 transform hover:scale-102 hover:-translate-y-1 ${
                    hoveredCard === item.id
                      ? "border-blue-400 shadow-blue-200"
                      : "border-gray-200 hover:border-blue-300"
                  }`}
                  onMouseEnter={() => setHoveredCard(item.id)}
                  onMouseLeave={() => setHoveredCard(null)}
                >
                  <div className='relative'>
                    <div className='absolute -top-2 -left-2 w-6 h-6 bg-gradient-to-br from-blue-400 to-purple-500 rounded-full opacity-60 group-hover:animate-spin'></div>

                    {item.description.map((desc, idx) => (
                      <div
                        key={idx}
                        className='flex items-start mb-4 group-hover:translate-x-1 transition-transform duration-300'
                        style={{ transitionDelay: `${idx * 100}ms` }}
                      >
                        <span className='text-2xl mr-4 mt-1 group-hover:animate-bounce'>
                          üìå
                        </span>
                        <p className='text-gray-700 leading-relaxed text-lg group-hover:text-gray-800 transition-colors duration-300'>
                          {desc}
                        </p>
                      </div>
                    ))}
                  </div>
                </div>

                {/* Category Analysis Card */}
                <div
                  className={`timeline-card group bg-gradient-to-br from-purple-50 to-indigo-50 rounded-3xl shadow-xl p-8 border-2 transition-all duration-500 transform hover:scale-102 hover:-translate-y-1 ${
                    hoveredCard === item.id
                      ? "border-purple-400 shadow-purple-200"
                      : "border-purple-200 hover:border-purple-300"
                  }`}
                  onMouseEnter={() => setHoveredCard(item.id)}
                  onMouseLeave={() => setHoveredCard(null)}
                >
                  <div className='relative'>
                    <div className='absolute -top-2 -right-2 w-6 h-6 bg-gradient-to-br from-purple-400 to-pink-500 rounded-full opacity-60 group-hover:animate-pulse'></div>

                    <div className='flex items-start mb-4 group-hover:translate-x-1 transition-transform duration-300'>
                      <span className='text-2xl mr-4 mt-1 group-hover:animate-bounce'>
                        üîé
                      </span>
                      <h5 className='font-bold text-xl text-purple-800 group-hover:text-purple-900 transition-colors duration-300'>
                        Ph·∫°m tr√π: {item.category}
                      </h5>
                    </div>
                    <div className='flex items-start group-hover:translate-x-1 transition-transform duration-300 delay-100'>
                      <span className='text-2xl mr-4 mt-1 group-hover:animate-bounce delay-200'>
                        üëâ
                      </span>
                      <p className='text-purple-700 leading-relaxed text-lg group-hover:text-purple-800 transition-colors duration-300'>
                        {item.categoryDescription}
                      </p>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        ))}

        {/* Enhanced Conclusion Section */}
        <div className='relative mt-32'>
          <div
            className='timeline-dot absolute left-1/2 transform -translate-x-1/2 w-12 h-12 rounded-full border-4 border-white shadow-2xl z-20'
            style={{
              background: "linear-gradient(45deg, #10b981, #059669)",
              boxShadow:
                "0 0 30px rgba(16, 185, 129, 0.6), 0 0 60px rgba(16, 185, 129, 0.3)",
            }}
          ></div>

          <div className='group bg-gradient-to-br from-green-50 via-emerald-50 to-teal-50 rounded-3xl shadow-2xl p-12 border-2 border-green-200 mx-8 hover:border-green-300 transition-all duration-500 transform hover:scale-102 hover:-translate-y-2'>
            <div className='text-center mb-10'>
              <div className='inline-block p-4 bg-gradient-to-br from-green-400 to-emerald-500 rounded-full mb-6 group-hover:animate-pulse'>
                <span className='text-4xl'>üéØ</span>
              </div>
              <h3 className='text-4xl md:text-5xl font-bold text-green-800 mb-4 group-hover:text-green-900 transition-colors duration-300'>
                B√†i h·ªçc r√∫t ra
              </h3>
              <div className='w-24 h-1 bg-gradient-to-r from-green-400 to-emerald-500 rounded-full mx-auto'></div>
            </div>

            <div className='space-y-6 max-w-5xl mx-auto'>
              <div className='group/item bg-white rounded-2xl p-6 shadow-lg border border-green-100 hover:border-green-300 transition-all duration-300 transform hover:scale-105 hover:-translate-y-1'>
                <div className='flex items-start'>
                  <div className='flex-shrink-0 w-8 h-8 bg-gradient-to-br from-green-400 to-emerald-500 rounded-full flex items-center justify-center mr-4 group-hover/item:animate-spin'>
                    <span className='text-white text-sm font-bold'>1</span>
                  </div>
                  <p className='text-gray-800 font-semibold text-lg leading-relaxed group-hover/item:text-green-800 transition-colors duration-300'>
                    M·∫°ng x√£ h·ªôi l√† c∆° h·ªôi nh∆∞ng c≈©ng l√† √°p l·ª±c - c·∫ßn bi·∫øt c√¢n
                    b·∫±ng v√† s·ª≠ d·ª•ng m·ªôt c√°ch th√¥ng minh.
                  </p>
                </div>
              </div>

              <div className='group/item bg-white rounded-2xl p-6 shadow-lg border border-green-100 hover:border-green-300 transition-all duration-300 transform hover:scale-105 hover:-translate-y-1'>
                <div className='flex items-start'>
                  <div className='flex-shrink-0 w-8 h-8 bg-gradient-to-br from-emerald-400 to-teal-500 rounded-full flex items-center justify-center mr-4 group-hover/item:animate-spin'>
                    <span className='text-white text-sm font-bold'>2</span>
                  </div>
                  <p className='text-gray-800 font-semibold text-lg leading-relaxed group-hover/item:text-emerald-800 transition-colors duration-300'>
                    N·∫øu ch·ªâ ch·∫°y theo hi·ªán t∆∞·ª£ng (trend, view, like) th√¨ s·∫Ω ƒë√°nh
                    m·∫•t gi√° tr·ªã th·∫≠t v√† m·ª•c ti√™u ban ƒë·∫ßu.
                  </p>
                </div>
              </div>

              <div className='group/item bg-white rounded-2xl p-6 shadow-lg border border-green-100 hover:border-green-300 transition-all duration-300 transform hover:scale-105 hover:-translate-y-1'>
                <div className='flex items-start'>
                  <div className='flex-shrink-0 w-8 h-8 bg-gradient-to-br from-teal-400 to-cyan-500 rounded-full flex items-center justify-center mr-4 group-hover/item:animate-spin'>
                    <span className='text-white text-sm font-bold'>3</span>
                  </div>
                  <p className='text-gray-800 font-semibold text-lg leading-relaxed group-hover/item:text-teal-800 transition-colors duration-300'>
                    Sinh vi√™n c·∫ßn nh·∫≠n th·ª©c ƒë√∫ng: m·∫°ng x√£ h·ªôi ch·ªâ l√† c√¥ng c·ª•,
                    b·∫£n ch·∫•t c·ªßa vi·ªác t√¨m vi·ªác v√† x√¢y d·ª±ng th∆∞∆°ng hi·ªáu c√° nh√¢n
                    v·∫´n l√† nƒÉng l·ª±c th·ª±c s·ª±.
                  </p>
                </div>
              </div>
            </div>

            {/* Floating decorative elements */}
            <div className='absolute -top-4 -left-4 w-8 h-8 bg-gradient-to-br from-green-400 to-emerald-500 rounded-full opacity-60 animate-bounce'></div>
            <div className='absolute -bottom-4 -right-4 w-6 h-6 bg-gradient-to-br from-emerald-400 to-teal-500 rounded-full opacity-40 animate-pulse delay-1000'></div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default TimelineSection;
